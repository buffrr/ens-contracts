{
  "address": "0xe521B84246C1f9c4cAADFCFb4569C29db6dA3d0C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        },
        {
          "internalType": "contract NameResolver",
          "name": "resolverAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADDR_REVERSE_NODE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "claimWithResolver",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultResolver",
      "outputs": [
        {
          "internalType": "contract NameResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "node",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f3d4df86beb52ea451a0ae1507c287b9fc8bae993a232a939cd76ceda5daee0",
  "receipt": {
    "to": null,
    "from": "0x4FeFEc75cd8C2D831055C0E8E029f533b3eBcE4B",
    "contractAddress": "0xe521B84246C1f9c4cAADFCFb4569C29db6dA3d0C",
    "transactionIndex": 103,
    "gasUsed": "674682",
    "logsBloom": "0x
    "blockHash": "0xcae55d788f808655d06f75cc84be6bf6ffa9f8c14c24b67c3b69dd45cb582aee",
    "transactionHash": "0x9f3d4df86beb52ea451a0ae1507c287b9fc8bae993a232a939cd76ceda5daee0",
    "logs": [],
    "blockNumber": 8678618,
    "cumulativeGasUsed": "20966557",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1E5266f64F0BcFC7C9E13fC900a75F53C51321C9",
    "0xb0737DcEbA696eEEAede9Cd672a6F04b8DF9447D"
  ],
  "solcInputHash": "4f213114e8b4d533011999912bd2fcbf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"contract NameResolver\",\"name\":\"resolverAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDR_REVERSE_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimWithResolver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultResolver\",\"outputs\":[{\"internalType\":\"contract NameResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"owner\":\"The address to set as the owner of the reverse record in ENS.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"claimWithResolver(address,address)\":{\"details\":\"Transfers ownership of the reverse ENS record associated with the      calling account.\",\"params\":{\"owner\":\"The address to set as the owner of the reverse record in ENS.\",\"resolver\":\"The address of the resolver to set; 0 to leave unchanged.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"ensAddr\":\"The address of the ENS registry.\",\"resolverAddr\":\"The address of the default reverse resolver.\"}},\"node(address)\":{\"details\":\"Returns the node hash for a given account's reverse records.\",\"params\":{\"addr\":\"The address to hash\"},\"returns\":{\"_0\":\"The ENS node hash.\"}},\"setName(string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.\",\"params\":{\"name\":\"The name to set for this address.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/ReverseRegistrar.sol\":\"ReverseRegistrar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\ncontract ReverseRegistrar {\\n    // namehash('addr.reverse')\\n    bytes32 public constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    ENS public ens;\\n    NameResolver public defaultResolver;\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(ENS ensAddr, NameResolver resolverAddr) public {\\n        ens = ensAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return claimWithResolver(owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\\n        bytes32 label = sha3HexAddress(msg.sender);\\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentOwner = ens.owner(node);\\n\\n        // Update the resolver if required\\n        if (resolver != address(0x0) && resolver != ens.resolver(node)) {\\n            // Transfer the name to us first if it's not already\\n            if (currentOwner != address(this)) {\\n                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\\n                currentOwner = address(this);\\n            }\\n            ens.setResolver(node, resolver);\\n        }\\n\\n        // Update the owner if required\\n        if (currentOwner != owner) {\\n            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\\n        }\\n\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node = claimWithResolver(address(this), address(defaultResolver));\\n        defaultResolver.setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        addr;\\n        ret; // Stop warning us about unused variables\\n        assembly {\\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\\n\\n            for { let i := 40 } gt(i, 0) { } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0954bb8471f1f58353106f19c05b57f75349579afc5ab296b800b3df906907ee\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c50380380610c5083398101604081905261002f916101b8565b600080546001600160a01b03199081166001600160a01b03858116918217845560018054909316908516179091556040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526302571be39060240160206040518083038186803b1580156100b157600080fd5b505afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e9919061017d565b90506001600160a01b0381161561017557604051630f41a04d60e11b81523360048201526001600160a01b03821690631e83409a90602401602060405180830381600087803b15801561013b57600080fd5b505af115801561014f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017391906101a0565b505b505050610209565b60006020828403121561018e578081fd5b8151610199816101f1565b9392505050565b6000602082840312156101b1578081fd5b5051919050565b600080604083850312156101ca578081fd5b82516101d5816101f1565b60208401519092506101e6816101f1565b809150509250929050565b6001600160a01b038116811461020657600080fd5b50565b610a38806102186000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637cf8a2eb1161005b5780637cf8a2eb14610100578063828eab0e14610127578063bffbe61c14610147578063c47f00271461015a57600080fd5b80630f5a5466146100825780631e83409a146100a85780633f15457f146100bb575b600080fd5b61009561009036600461081d565b61016d565b6040519081526020015b60405180910390f35b6100956100b63660046107de565b610615565b6000546100db9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100957f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e281565b6001546100db9073ffffffffffffffffffffffffffffffffffffffff1681565b6100956101553660046107de565b610628565b61009561016836600461086d565b610683565b6000806101793361073e565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26020820152908101829052909150600090606001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290528051602090910120600080547f02571be3000000000000000000000000000000000000000000000000000000008452600484018390529193509173ffffffffffffffffffffffffffffffffffffffff909116906302571be39060240160206040518083038186803b15801561025557600080fd5b505afa158015610269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028d9190610801565b905073ffffffffffffffffffffffffffffffffffffffff85161580159061038157506000546040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690630178b8bf9060240160206040518083038186803b15801561031957600080fd5b505afa15801561032d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610801565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b156105055773ffffffffffffffffffffffffffffffffffffffff81163014610478576000546040517f06ab59230000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526024810185905230604482015273ffffffffffffffffffffffffffffffffffffffff909116906306ab592390606401602060405180830381600087803b15801561043b57600080fd5b505af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610855565b503090505b6000546040517f1896f70a0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff878116602483015290911690631896f70a90604401600060405180830381600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461060c576000546040517f06ab59230000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526024810185905273ffffffffffffffffffffffffffffffffffffffff8881166044830152909116906306ab592390606401602060405180830381600087803b1580156105d257600080fd5b505af11580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190610855565b505b50949350505050565b600061062282600061016d565b92915050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26106548361073e565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b60015460009081906106ac90309073ffffffffffffffffffffffffffffffffffffffff1661016d565b6001546040517f7737221300000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff16906377372213906107059084908790600401610935565b600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b509295945050505050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b80156107d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a81536010909304927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a8153601084049350610764565b5050602860002092915050565b6000602082840312156107ef578081fd5b81356107fa816109dd565b9392505050565b600060208284031215610812578081fd5b81516107fa816109dd565b6000806040838503121561082f578081fd5b823561083a816109dd565b9150602083013561084a816109dd565b809150509250929050565b600060208284031215610866578081fd5b5051919050565b60006020828403121561087e578081fd5b813567ffffffffffffffff80821115610895578283fd5b818401915084601f8301126108a8578283fd5b8135818111156108ba576108ba6109ae565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610900576109006109ae565b81604052828152876020848701011115610918578586fd5b826020860160208301379182016020019490945295945050505050565b828152600060206040818401528351806040850152825b818110156109685785810183015185820160600152820161094c565b818111156109795783606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146109ff57600080fd5b5056fea2646970667358221220d3c118ac90ba932b9128ef08e5637ab155a67c2b20cf55a6ae2e272ad6ec99c164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637cf8a2eb1161005b5780637cf8a2eb14610100578063828eab0e14610127578063bffbe61c14610147578063c47f00271461015a57600080fd5b80630f5a5466146100825780631e83409a146100a85780633f15457f146100bb575b600080fd5b61009561009036600461081d565b61016d565b6040519081526020015b60405180910390f35b6100956100b63660046107de565b610615565b6000546100db9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100957f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e281565b6001546100db9073ffffffffffffffffffffffffffffffffffffffff1681565b6100956101553660046107de565b610628565b61009561016836600461086d565b610683565b6000806101793361073e565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26020820152908101829052909150600090606001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290528051602090910120600080547f02571be3000000000000000000000000000000000000000000000000000000008452600484018390529193509173ffffffffffffffffffffffffffffffffffffffff909116906302571be39060240160206040518083038186803b15801561025557600080fd5b505afa158015610269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028d9190610801565b905073ffffffffffffffffffffffffffffffffffffffff85161580159061038157506000546040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff90911690630178b8bf9060240160206040518083038186803b15801561031957600080fd5b505afa15801561032d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610801565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b156105055773ffffffffffffffffffffffffffffffffffffffff81163014610478576000546040517f06ab59230000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526024810185905230604482015273ffffffffffffffffffffffffffffffffffffffff909116906306ab592390606401602060405180830381600087803b15801561043b57600080fd5b505af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610855565b503090505b6000546040517f1896f70a0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff878116602483015290911690631896f70a90604401600060405180830381600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461060c576000546040517f06ab59230000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526024810185905273ffffffffffffffffffffffffffffffffffffffff8881166044830152909116906306ab592390606401602060405180830381600087803b1580156105d257600080fd5b505af11580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190610855565b505b50949350505050565b600061062282600061016d565b92915050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26106548361073e565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b60015460009081906106ac90309073ffffffffffffffffffffffffffffffffffffffff1661016d565b6001546040517f7737221300000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff16906377372213906107059084908790600401610935565b600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b509295945050505050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b80156107d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a81536010909304927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a8153601084049350610764565b5050602860002092915050565b6000602082840312156107ef578081fd5b81356107fa816109dd565b9392505050565b600060208284031215610812578081fd5b81516107fa816109dd565b6000806040838503121561082f578081fd5b823561083a816109dd565b9150602083013561084a816109dd565b809150509250929050565b600060208284031215610866578081fd5b5051919050565b60006020828403121561087e578081fd5b813567ffffffffffffffff80821115610895578283fd5b818401915084601f8301126108a8578283fd5b8135818111156108ba576108ba6109ae565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610900576109006109ae565b81604052828152876020848701011115610918578586fd5b826020860160208301379182016020019490945295945050505050565b828152600060206040818401528351806040850152825b818110156109685785810183015185820160600152820161094c565b818111156109795783606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146109ff57600080fd5b5056fea2646970667358221220d3c118ac90ba932b9128ef08e5637ab155a67c2b20cf55a6ae2e272ad6ec99c164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address)": {
        "details": "Transfers ownership of the reverse ENS record associated with the      calling account.",
        "params": {
          "owner": "The address to set as the owner of the reverse record in ENS."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "claimWithResolver(address,address)": {
        "details": "Transfers ownership of the reverse ENS record associated with the      calling account.",
        "params": {
          "owner": "The address to set as the owner of the reverse record in ENS.",
          "resolver": "The address of the resolver to set; 0 to leave unchanged."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "ensAddr": "The address of the ENS registry.",
          "resolverAddr": "The address of the default reverse resolver."
        }
      },
      "node(address)": {
        "details": "Returns the node hash for a given account's reverse records.",
        "params": {
          "addr": "The address to hash"
        },
        "returns": {
          "_0": "The ENS node hash."
        }
      },
      "setName(string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.",
        "params": {
          "name": "The name to set for this address."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12151,
        "contract": "contracts/registry/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENS)11491"
      },
      {
        "astId": 12154,
        "contract": "contracts/registry/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "defaultResolver",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NameResolver)12145"
      }
    ],
    "types": {
      "t_contract(ENS)11491": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(NameResolver)12145": {
        "encoding": "inplace",
        "label": "contract NameResolver",
        "numberOfBytes": "20"
      }
    }
  }
}